import boto3

# Initialize Boto3 Trusted Advisor client (AWS Support API)
client = boto3.client('support', region_name='us-east-1')

# List all Trusted Advisor checks
checks = client.describe_trusted_advisor_checks(language='en')

# Loop through all the checks and get detailed results for each
for check in checks['checks']:
    check_id = check['id']
    check_name = check['name']
    print(f"Fetching details for Check ID: {check_id}, Name: {check_name}")
    
    # Get the detailed result for each check
    try:
        check_result = client.describe_trusted_advisor_check_result(checkId=check_id)
        result = check_result['result']

        # Print status and handle cases where resourcesSummary or flaggedResources is missing
        status = result.get('status', 'status not available')
        print(f"Status: {status}")
        
        resources_summary = result.get('resourcesSummary', {})
        flagged_resources = resources_summary.get('resourcesFlagged', 0)
        print(f"Flagged Resources: {flagged_resources}")

        # Loop through flagged resources (if any exist)
        for resource in result.get('flaggedResources', []):
            print(f"Resource ID: {resource['resourceId']}, Status: {resource['status']}")
            print(f"Metadata: {resource['metadata']}")
        
    except KeyError as e:
        print(f"KeyError: {e} - Some fields might be missing for Check ID: {check_id}")
    except Exception as e:
        print(f"An error occurred: {e}")

    print("\n")  # Add a new line for better readability between checks
