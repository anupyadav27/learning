import boto3
from gremlin_python.driver import client, serializer

# Initialize DynamoDB resource
dynamodb = boto3.resource('dynamodb')
nodes_table = dynamodb.Table('CloudNodes')
relations_table = dynamodb.Table('CloudRelations')

# Initialize Gremlin Client to Neptune (Replace with your Neptune cluster endpoint)
neptune_endpoint = "wss://<neptune-cluster-endpoint>:8182/gremlin"  # Replace with your Neptune endpoint
gremlin_client = client.Client(
    neptune_endpoint,
    'g',
    username="/db/neptune",
    password="",
    message_serializer=serializer.GraphSONSerializersV2d0()
)

# Helper function to retrieve all nodes from DynamoDB
def get_all_nodes():
    response = nodes_table.scan()
    return response['Items']

# Helper function to retrieve all relationships from DynamoDB
def get_all_relations():
    response = relations_table.scan()
    return response['Items']

# Function to insert a node into Neptune (as a Vertex)
def add_node(node_id, service_name, node_type, details):
    gremlin_query = f"""
    g.addV('Resource').
    property('node_id', '{node_id}').
    property('service_name', '{service_name}').
    property('type', '{node_type}').
    property('details', '{details}')
    """
    callback = gremlin_client.submitAsync(gremlin_query)
    if callback.result():
        print(f"Inserted node {node_id}")

# Function to insert a relationship (Edge) into Neptune
def add_edge(source_node_id, target_node_id, relation_type, relation_details):
    gremlin_query = f"""
    g.V().has('node_id', '{source_node_id}').as('source').
    V().has('node_id', '{target_node_id}').as('target').
    addE('{relation_type}').from('source').to('target').
    property('details', '{relation_details}')
    """
    callback = gremlin_client.submitAsync(gremlin_query)
    if callback.result():
        print(f"Inserted edge between {source_node_id} and {target_node_id}")

# Function to migrate nodes from DynamoDB to Neptune
def migrate_nodes_to_neptune():
    nodes = get_all_nodes()
    for node in nodes:
        node_id = node['node_id']
        service_name = node['service_name']
        node_type = node['type']
        details = node['resource_details']
        add_node(node_id, service_name, node_type, details)

# Function to migrate relationships from DynamoDB to Neptune
def migrate_relations_to_neptune():
    relations = get_all_relations()
    for relation in relations:
        source_node_id = relation['relation_id']  # Ensure you have valid source and target node IDs
        target_node_id = relation.get('target_node_id')  # Assuming this is stored in the details
        relation_type = relation['relation_type']
        relation_details = relation['relation_details']
        
        if target_node_id:
            add_edge(source_node_id, target_node_id, relation_type, relation_details)

# Main function to run the migration
def main():
    print("Migrating nodes from DynamoDB to Neptune...")
    migrate_nodes_to_neptune()

    print("Migrating relationships from DynamoDB to Neptune...")
    migrate_relations_to_neptune()

    print("Migration complete!")

if __name__ == "__main__":
    main()
