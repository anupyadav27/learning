import boto3
import json

# Initialize DynamoDB resource
dynamodb = boto3.resource('dynamodb')

# DynamoDB Table Names
NODES_TABLE_NAME = 'CloudNodes'
RELATIONS_TABLE_NAME = 'CloudRelations'

# Get the tables
nodes_table = dynamodb.Table(NODES_TABLE_NAME)
relations_table = dynamodb.Table(RELATIONS_TABLE_NAME)

# Insert into DynamoDB (Nodes)
def insert_node(service_name, resource_type, resource_details):
    nodes_table.put_item(
        Item={
            'node_id': resource_details['ResourceId'],  # Assuming ResourceId is available
            'service_name': service_name,
            'type': resource_type,
            'resource_details': json.dumps(resource_details)
        }
    )

# Insert into DynamoDB (Relationships)
def insert_relation(relation_type, service_name, relation_details):
    relations_table.put_item(
        Item={
            'relation_id': relation_details['RelationId'],  # Assuming RelationId is available
            'service_name': service_name,
            'relation_type': relation_type,
            'relation_details': json.dumps(relation_details)
        }
    )

# Example Functions for EC2 (Nodes)
def fetch_ec2_instances():
    ec2 = boto3.client('ec2')
    instances = ec2.describe_instances()
    for reservation in instances['Reservations']:
        for instance in reservation['Instances']:
            insert_node('EC2', 'Compute', instance)

# Example Function for VPC (Relationships)
def fetch_vpcs():
    vpc = boto3.client('ec2')
    vpcs = vpc.describe_vpcs()
    for vpc_data in vpcs['Vpcs']:
        insert_relation('VPC', 'Networking', vpc_data)

# Main Execution
def main():
    print("Fetching EC2 Instances (Compute Nodes)")
    fetch_ec2_instances()
    
    print("Fetching VPCs (Networking Relations)")
    fetch_vpcs()

if __name__ == "__main__":
    main()
