AWSTemplateFormatVersion: '2010-09-09'
Description: 'ML pipeline using AWS Bedrock for IaC generation from diagrams'

Parameters:
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket to store diagrams and generated IaC

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      VersioningConfiguration:
        Status: Enabled

  BedrockLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub ${S3Bucket.Arn}/*

  BedrockLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt BedrockLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import base64

          bedrock = boto3.client('bedrock-runtime')
          s3 = boto3.client('s3')

          def handler(event, context):
              # Get the uploaded file details from the S3 event
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = event['Records'][0]['s3']['object']['key']

              # Download the image file
              response = s3.get_object(Bucket=bucket, Key=key)
              image_content = response['Body'].read()

              # Encode the image to base64
              base64_image = base64.b64encode(image_content).decode('utf-8')

              # Prepare the prompt for Claude
              prompt = f"""Human: I'm going to show you a diagram of an AWS architecture. Please analyze it and generate the corresponding AWS CloudFormation template in YAML format. Here's the image in base64 format:

              {base64_image}

              Please generate the CloudFormation template based on the architecture shown in the diagram.

              Assistant: Certainly! I'll analyze the diagram and generate an AWS CloudFormation template in YAML format based on the architecture shown. Here's the template:

              ```yaml
              """

              # Invoke Bedrock model (Claude)
              response = bedrock.invoke_model(
                  modelId='anthropic.claude-v2',
                  body=json.dumps({
                      "prompt": prompt,
                      "max_tokens_to_sample": 4000,
                      "temperature": 0.5,
                      "top_p": 0.9,
                  })
              )

              # Parse response
              response_body = json.loads(response['body'].read())
              generated_iac = response_body['completion']

              # Extract the YAML content
              yaml_content = generated_iac.split('```yaml')[1].split('```')[0].strip()

              # Save generated IaC to S3
              output_key = f"generated_iac/{os.path.splitext(key)[0]}.yaml"
              s3.put_object(Bucket=bucket, Key=output_key, Body=yaml_content)

              return {
                  'statusCode': 200,
                  'body': json.dumps('IaC generation complete')
              }
      Runtime: python3.8
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Bucket

  LambdaS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BedrockLambdaFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt S3Bucket.Arn

  S3BucketNotification:
    Type: AWS::S3::BucketNotification
    Properties:
      Bucket: !Ref S3Bucket
      LambdaConfigurations:
        - Event: s3:ObjectCreated:*
          Filter:
            S3Key:
              Rules:
                - Name: prefix
                  Value: diagrams/
          Function: !GetAtt BedrockLambdaFunction.Arn

Outputs:
  S3BucketName:
    Description: Name of the S3 bucket for diagrams and generated IaC
    Value: !Ref S3Bucket
  LambdaFunctionName:
    Description: Name of the Lambda function processing diagrams
    Value: !Ref BedrockLambdaFunction