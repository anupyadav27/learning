from google.cloud import resource_manager
from neo4j import GraphDatabase
from flask import jsonify

# Function to fetch enabled GCP resources
def fetch_gcp_resources():
    client = resource_manager.Client()
    enabled_resources = []
    for project in client.list_projects():
        if project.status == "ACTIVE":
            enabled_resources.append(project.project_id)
    return enabled_resources

# Neo4j connection setup
uri = "neo4j+s://<your-neo4j-uri>"
username = "<your-username>"
password = "<your-password>"

# Function to upload resources to Neo4j
def upload_to_neo4j(enabled_resources):
    driver = GraphDatabase.driver(uri, auth=(username, password))
    with driver.session() as session:
        for resource in enabled_resources:
            session.run("MERGE (r:Resource {name: $name})", name=resource)

# Main function that handles the HTTP request
def main(request):
    try:
        # Fetch enabled GCP resources
        enabled_resources = fetch_gcp_resources()

        # Upload to Neo4j
        upload_to_neo4j(enabled_resources)

        # Return a JSON response indicating success
        return jsonify({
            "status": "success",
            "message": "Data uploaded to Neo4j successfully",
            "resources": enabled_resources
        }), 200

    except Exception as e:
        # If there's an error, return a JSON response with the error message
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500
