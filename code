import boto3
import json

# Initialize boto3 clients for different AWS services
ec2 = boto3.client('ec2')
s3 = boto3.client('s3')
rds = boto3.client('rds')
iam = boto3.client('iam')
vpc = boto3.client('ec2')
route53 = boto3.client('route53')
elb = boto3.client('elbv2')
kms = boto3.client('kms')
lambda_client = boto3.client('lambda')
cloudtrail = boto3.client('cloudtrail')
guardduty = boto3.client('guardduty')
athena = boto3.client('athena')
redshift = boto3.client('redshift')

# Initialize DynamoDB resource
dynamodb = boto3.resource('dynamodb')

# DynamoDB Table Names
NODES_TABLE_NAME = 'CloudNodes'
RELATIONS_TABLE_NAME = 'CloudRelations'

# Get the tables
nodes_table = dynamodb.Table(NODES_TABLE_NAME)
relations_table = dynamodb.Table(RELATIONS_TABLE_NAME)

# Function to insert nodes into DynamoDB
def insert_node(service_name, resource_type, resource_details):
    try:
        nodes_table.put_item(
            Item={
                'node_id': resource_details['ResourceId'] if 'ResourceId' in resource_details else resource_details['InstanceId'],
                'service_name': service_name,
                'type': resource_type,
                'resource_details': json.dumps(resource_details)
            }
        )
    except Exception as e:
        print(f"Error inserting node: {e}")

# Function to insert relationships into DynamoDB
def insert_relation(relation_type, service_name, relation_details):
    try:
        relations_table.put_item(
            Item={
                'relation_id': relation_details['RelationId'] if 'RelationId' in relation_details else relation_details['VpcId'],
                'service_name': service_name,
                'relation_type': relation_type,
                'relation_details': json.dumps(relation_details)
            }
        )
    except Exception as e:
        print(f"Error inserting relation: {e}")

# Fetch EC2 instances (Compute Node)
def fetch_ec2_instances():
    instances = ec2.describe_instances()
    for reservation in instances['Reservations']:
        for instance in reservation['Instances']:
            insert_node('EC2', 'Compute', instance)

# Fetch S3 Buckets (Storage Node)
def fetch_s3_buckets():
    buckets = s3.list_buckets()
    for bucket in buckets['Buckets']:
        insert_node('S3', 'Storage', bucket)

# Fetch RDS instances (Database Node)
def fetch_rds_instances():
    rds_instances = rds.describe_db_instances()
    for db_instance in rds_instances['DBInstances']:
        insert_node('RDS', 'Database', db_instance)

# Fetch IAM roles (Relation - Access Control)
def fetch_iam_roles():
    iam_roles = iam.list_roles()
    for role in iam_roles['Roles']:
        insert_relation('IAM Role', 'IAM', role)

# Fetch VPCs (Networking Relation)
def fetch_vpcs():
    vpcs = vpc.describe_vpcs()
    for vpc_data in vpcs['Vpcs']:
        insert_relation('VPC', 'Networking', vpc_data)

# Fetch Security Groups (Networking Relation)
def fetch_security_groups():
    security_groups = vpc.describe_security_groups()
    for sg in security_groups['SecurityGroups']:
        insert_relation('Security Group', 'Security', sg)

# Fetch Route 53 Hosted Zones (DNS Relation)
def fetch_route53_zones():
    hosted_zones = route53.list_hosted_zones()
    for zone in hosted_zones['HostedZones']:
        insert_relation('Route53 Zone', 'DNS', zone)

# Fetch Load Balancers (Load Balancing Relation)
def fetch_elbs():
    elbs = elb.describe_load_balancers()
    for lb in elbs['LoadBalancers']:
        insert_relation('Load Balancer', 'ELB', lb)

# Fetch Lambda functions (Compute Node)
def fetch_lambda_functions():
    functions = lambda_client.list_functions()
    for function in functions['Functions']:
        insert_node('Lambda', 'Compute', function)

# Fetch CloudTrail logs (Monitoring Node)
def fetch_cloudtrail_logs():
    trails = cloudtrail.describe_trails()
    for trail in trails['trailList']:
        insert_node('CloudTrail', 'Monitoring', trail)

# Fetch GuardDuty findings (Security Node)
def fetch_guardduty_findings():
    detectors = guardduty.list_detectors()
    for detector_id in detectors['DetectorIds']:
        findings = guardduty.list_findings(DetectorId=detector_id)
        for finding in findings['FindingIds']:
            insert_node('GuardDuty', 'Security', finding)

# Fetch Athena Workgroups (Analytics Node)
def fetch_athena_workgroups():
    workgroups = athena.list_work_groups()
    for workgroup in workgroups['WorkGroups']:
        insert_node('Athena', 'Analytics', workgroup)

# Fetch Redshift clusters (Database Node)
def fetch_redshift_clusters():
    clusters = redshift.describe_clusters()
    for cluster in clusters['Clusters']:
        insert_node('Redshift', 'Database', cluster)

# Fetch KMS Keys (Security Relation)
def fetch_kms_keys():
    kms_keys = kms.list_keys()
    for key in kms_keys['Keys']:
        insert_relation('KMS Key', 'KMS', key)

# Main function to run all fetch operations
def main():
    print("Fetching EC2 Instances (Compute Nodes)")
    fetch_ec2_instances()
    
    print("Fetching S3 Buckets (Storage Nodes)")
    fetch_s3_buckets()
    
    print("Fetching RDS Instances (Database Nodes)")
    fetch_rds_instances()
    
    print("Fetching IAM Roles (Access Control Relations)")
    fetch_iam_roles()
    
    print("Fetching VPCs (Networking Relations)")
    fetch_vpcs()
    
    print("Fetching Security Groups (Networking Relations)")
    fetch_security_groups()
    
    print("Fetching Route 53 Zones (DNS Relations)")
    fetch_route53_zones()
    
    print("Fetching Load Balancers (Load Balancing Relations)")
    fetch_elbs()
    
    print("Fetching Lambda Functions (Compute Nodes)")
    fetch_lambda_functions()
    
    print("Fetching CloudTrail Logs (Monitoring Nodes)")
    fetch_cloudtrail_logs()
    
    print("Fetching GuardDuty Findings (Security Nodes)")
    fetch_guardduty_findings()
    
    print("Fetching Athena Workgroups (Analytics Nodes)")
    fetch_athena_workgroups()
    
    print("Fetching Redshift Clusters (Database Nodes)")
    fetch_redshift_clusters()
    
    print("Fetching KMS Keys (Security Relations)")
    fetch_kms_keys()

if __name__ == "__main__":
    main()
